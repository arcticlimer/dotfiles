"--------------------------------------------------------------;
"                          Vim-Plug                            ;
"--------------------------------------------------------------;

" Install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin()


"----------------------------------;
" Useful general usage plugins     ;
"----------------------------------;

" Might need to install coc-snippets and set the snippets
" directory using coc command `snippets.openSnippetFiles`
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
let g:UltiSnipsExpandTrigger = '<Nop>'
imap <tab> <Plug>(coc-snippets-expand)

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
let g:fzf_buffers_jump = 1
let g:fzf_preview_window = ['right:50%', 'ctrl-/']
let g:fzf_history_dir = '~/.local/share/fzf-history'
let $FZF_DEFAULT_COMMAND = 'fd -H'
let $FZF_DEFAULT_OPTS = '--exact --reverse'
Plug 'stsewd/fzf-checkout.vim'
let g:fzf_checkout_git_options = '--sort=-committerdate'
let g:fzf_tag_actions = {
\ 'checkout': {'execute': '!{git} -C {cwd} checkout {branch}'},
\}
Plug 'dominickng/fzf-session.vim'
let g:fzf_session_path = $HOME . '/.local/share/vim/session'

Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-eunuch'

Plug 'christoomey/vim-tmux-navigator'
Plug 'jiangmiao/auto-pairs'
Plug 'thinca/vim-quickrun'
Plug 'pbrisbin/vim-mkdir'
Plug 'wellle/targets.vim'
Plug 'junegunn/goyo.vim'
Plug 'vim-utils/vim-man'
Plug 'mattn/emmet-vim'

Plug 'easymotion/vim-easymotion'
map s <Plug>(easymotion-overwin-f2)

Plug 'mg979/vim-visual-multi'
let g:VM_reselect_first = 1
let g:EasyMotion_smartcase = 1

Plug 'vim-test/vim-test'
let test#strategy = "vimterminal"

" Buffers managemenet
Plug 'moll/vim-bbye'

"----------------------------------;
" Git wrappers                     ;
"----------------------------------;

Plug 'tpope/vim-fugitive'

Plug 'airblade/vim-gitgutter'
let g:gitgutter_grep = 'rg'

set updatetime=100

"----------------------------------;
" Language servers / others        ;
"----------------------------------;

" Might need to install coc-marketplace and search
" for extensions with :CocList marketplace
Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'vimwiki/vimwiki'
let g:vimwiki_global_ext = 0
let g:vimwiki_list = [{'path': '~/.vimwiki', 'auto_diary_index': 1}]

"----------------------------------;
" Language plugins                 ;
"----------------------------------;

Plug 'sheerun/vim-polyglot'

"----------------------------------;
" Styling                          ;
"----------------------------------;

set statusline=
set statusline+=%f
set statusline+=\ %r
set statusline+=%<
set statusline+=%=
set statusline+=%{GetBranch()}
set statusline+=%{GitStatus()}
set statusline+=\ %{expand(&filetype)}\ \\|
set statusline+=\ %{expand(&fileformat)}\ \\|
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}\ \\|
set statusline+=\ %p%%\ \\|
set statusline+=\ %l:%v\ \\|

Plug 'ryanoasis/vim-devicons'

Plug 'sainnhe/gruvbox-material'
let g:gruvbox_material_background = 'hard'

call plug#end()

"---------------------------------------------------------------;
"                            Theme                              ;
"---------------------------------------------------------------;

set background=dark

"---------------------------------------------------------------;
"                         Autocommands                          ;
"---------------------------------------------------------------;

augroup my_autocommands
  " Remove trailing whitespaces on write
  au BufWritePre * %s/\s\+$//e
  " Open help windows vertically splitted
  au FileType help wincmd L
  " Meaningful backup name, ex: filename@2015-04-05.14:59
  au BufWritePre * let &bex = '@' . strftime("%F.%H:%M")
augroup end

"---------------------------------------------------------------;
"                          Functions                            ;
"---------------------------------------------------------------;

function ShowDocumentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

function GetBranch()
  if exists('FugitiveHead')
    let head = FugitiveHead()
    return head != '' ? 'git:(' . head . ') ' : ''
  endif
endfunction

function! GitStatus()
  if exists('GitGutterGetHunkSummary')
    let [a,m,r] = GitGutterGetHunkSummary()
    let head = FugitiveHead()
    return head != '' ? printf('| +%d ~%d -%d |', a, m, r) : ''
  endif
endfunction

function! ToggleQuickFix()
    if empty(filter(getwininfo(), 'v:val.quickfix'))
        copen
    else
        cclose
    endif
endfunction

function GoToDefinition()
  " TODO: Suppress coc warning if the filetype doesn't have lsp support
  if CocAction('jumpDefinition')
    norm <Plug>(coc-definition)
  else
    norm! gd
  endif
endfunction

"--------------------------------------------------------------;
"                          Commands                            ;
"--------------------------------------------------------------;

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call CocAction('fold', <f-args>)
" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call CocAction('runCommand', 'editor.action.organizeImport')
command! -nargs=0 Prettier :CocCommand prettier.formatFile

"--------------------------------------------------------------;
"                           Macros                             ;
"--------------------------------------------------------------;

let @s="iStoredMacroSample\<Esc>"

"--------------------------------------------------------------;
"                          Mappings                            ;
"--------------------------------------------------------------;

let mapleader=" "

"----------------------------------;
" b - Buffer                       ;
"----------------------------------;

" Save and delete current buffer
nnoremap <silent> <Leader>bd :Bdelete<cr>

" Change buffers
nnoremap <silent> <Leader>bn :bnext<cr>
nnoremap <silent> <Leader>bp :bprev<cr>

"----------------------------------;
" t - Tabs / Testing               ;
"----------------------------------;

nnoremap <Leader>to :tabnew<space>
nnoremap <Leader>tq :tabclose<cr>

" Swap tabs
" TODO: Add count support
nnoremap <silent><Leader>t< :execute "tabmove" tabpagenr() - 2 <CR>
nnoremap <silent><Leader>t> :execute "tabmove" tabpagenr() + 1 <CR>

nnoremap <Leader>ts :TestSuite<cr>
nnoremap <Leader>tn :TestNearest<cr>
nnoremap <Leader>tf :TestFile<cr>
nnoremap <Leader>tv :TestVisit<cr>
nnoremap <Leader>tl :TestLast<cr>

"----------------------------------;
" s - Session                      ;
"----------------------------------;

nnoremap <leader>sl :Sessions<cr>
" Session new
nnoremap <leader>sn :Session<space>
" Session delete
nnoremap <Leader>sd :SDelete<space>

nnoremap <silent> <Leader>sc :setlocal spell!<cr>

"----------------------------------;
" f - Find                         ;
"----------------------------------;

" Find files
nnoremap <silent> <Leader>ff :Files<cr>
" Find git files
nnoremap <silent> <Leader>fg :GFiles<cr>
" Find commits
nnoremap <silent> <Leader>fc :Commits<cr>
" Find buffers
nnoremap <silent> <Leader>fb :Buffers<cr>
" Find theme
nnoremap <silent> <Leader>ft :Colors<cr>
" Find windows
nnoremap <silent> <Leader>fw :Windows<cr>
" Find substring in files
nnoremap <silent> <Leader>fs :Rg<cr>
" Find lines in current buffer
nnoremap <leader>fl :Lines<CR>
" Find mappings
nnoremap <silent> <Leader>fm :Maps<cr>
" Find marks
nnoremap <silent> <Leader>fM :Marks<cr>
" Find in help tags
nnoremap <silent> <Leader>fh :Helptags<cr>

"----------------------------------;
" p - Project                      ;
"----------------------------------;

" Open alternative projectionist file on vertical split
nnoremap <silent> <Leader>pa :AV<cr>

"----------------------------------;
" g - Git                          ;
"----------------------------------;

" Git status
nnoremap <silent> <Leader>G :tab G<cr>
" Git diff
nnoremap <silent> <Leader>gd :Gvdiffsplit<cr>
" Git DIFF
nnoremap <silent> <Leader>gD :!git diff<cr>
" Git log
nnoremap <silent> <Leader>gl :Gclog<cr>
" Search and manage git branches
nnoremap <silent> <Leader>gb :GBranches<cr>
" Search and manage git tags
nnoremap <silent> <Leader>gt :GTags<cr>

" Select sides when resolving merge conflicts
nnoremap <silent> <Leader>gf :diffget //2<cr>
nnoremap <silent> <Leader>gj :diffget //3<cr>

"----------------------------------;
" l - Language server client       ;
"----------------------------------;

" GoTo code navigation.
nmap <silent> gd :call GoToDefinition()<cr>
nmap <silent> <Leader>cgy <Plug>(coc-type-definition)
nmap <silent> <Leader>cgi <Plug>(coc-implementation)
nmap <silent> <Leader>cgr <Plug>(coc-references)

" Format
vmap <leader>lf <Plug>(coc-format-selected)
nmap <leader>lf :call CocAction('format')<cr>

" Symbol renaming.
nmap <leader>lr  <Plug>(coc-rename)

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>la <Plug>(coc-codeaction)
" Coc fix
nmap <leader>lq  <Plug>(coc-fix-current)

" Show all diagnostics.
nnoremap <silent><nowait> <Leader>ld  :<C-u>CocList diagnostics<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <Leader>lo  :<C-u>CocList outline<cr>

" Show commands.
nnoremap <silent><nowait> <Leader>lc :<C-u>CocList commands<cr>

" Search workspace symbols.
nnoremap <silent><nowait> <Leader>ls :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <Leader>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <Leader>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
" TODO: find mappings to those
" nnoremap <silent><nowait> <Leader>p  :<C-u>CocListResume<CR>

"----------------------------------;
" v - Vim utils                    ;
"----------------------------------;

" Reload vimrc
nnoremap <silent> <Leader>vr :source ~/.vim/vimrc<cr>
" QUIT vim
nnoremap <silent> <Leader>vQ :quitall!<cr>
" Install plugins
nnoremap <silent> <Leader>vi :PlugInstall<cr>
" Clean unused
nnoremap <silent> <Leader>vc :PlugClean<cr>
" Update plugins
nnoremap <silent> <Leader>vu :PlugUpdate<cr>
" Vim quit
nnoremap <silent> <Leader>vq :qa<cr>

"----------------------------------;
" Others                           ;
"----------------------------------;

" Quick run
nnoremap <Leader>qr :QuickRun<cr>

" Quickfix list mappings
nnoremap <silent> <Leader>qt :call ToggleQuickFix()<cr>
nnoremap [q :cp<cr>
nnoremap ]q :cn<cr>

"----------------------------------;
" Other mappings                   ;
"----------------------------------;

" Reselect last cursors
nmap gl <Plug>(VM-Reselect-Last)

" Toggle zen mode
nmap <C-z> :Goyo<cr>
let g:goyo_linenr = 1

" Marks
nnoremap <C-g> `
nnoremap <C-g><C-g>  `"
noremap Y "+y

nnoremap <silent> zs :update<cr>

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

" Repeat last command
noremap <C-p> @:

" Repeat last macro
nnoremap Q @@

" Go to first character in line
noremap H ^

" Move one character to left on insert mode
" useful for getting out of (), for example.
inoremap <C-e> <Esc>la

"--------------------------------------------------------------;
"                        Text objects                          ;
"--------------------------------------------------------------;

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Gitgutter text objects
omap ih <Plug>(GitGutterTextObjectInnerPending)
omap ah <Plug>(GitGutterTextObjectOuterPending)
xmap ih <Plug>(GitGutterTextObjectInnerVisual)
xmap ah <Plug>(GitGutterTextObjectOuterVisual)

" Applying codeAction to the selected region.
" Example: `<leader>caap` for current paragraph
xmap <leader>ca  <Plug>(coc-codeaction-selected)
nmap <leader>ca  <Plug>(coc-codeaction-selected)

"--------------------------------------------------------------;
"                            Misc                              ;
"--------------------------------------------------------------;

set undofile                " Save undos after file closes
set undodir=~/.local/share/vim/undo     " Where to save undo histories
set undolevels=1000         " How many undos
" Some coc language servers have issues with backup files, see #649.
set backup
" Where to store backups
set backupdir=~/.local/share/vim/backup
" Make backup before overwriting the current buffer
set writebackup
" Overwrite the original backup file
set backupcopy=yes
set lazyredraw
" Show relative numbers mantaining the current line number
set number relativenumber
" This might be slow on some terminal emulators
set cursorline
set splitright
set scrolloff=5
set noswapfile
set wildmode=longest:list,full
set linebreak
set tabstop=2 shiftwidth=2 expandtab " Set tabs to 2 spaces
set smartcase ignorecase hlsearch " Search options
set foldmethod=indent " Fold based on indention levels.
set foldnestmax=3 " Only fold up to three nested levels.
set nofoldenable " Disable folding by default
set showcmd
set colorcolumn=80 " 80 character ruler
" Ignore case on wildmenu completion
set wildignorecase
" TextEdit might fail if hidden is not set.
set hidden
" Give more space for displaying messages.
set cmdheight=2
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
set spelllang=pt,en
" Don't auto line break when inserting text
set formatoptions-=t
" Show indent line on code with tabs
set listchars=tab:\|\ ,space:·
set list
set textwidth=80
set sessionoptions+=globals

" Kitty helper (https://sw.kovidgoyal.net/kitty/faq.html#id3)
let &t_ut=''

"Mode Settings
let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)

"Cursor settings:
"  1 -> blinking block
"  2 -> solid block
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar

if empty($DISPLAY)
  set listchars=
  colorscheme elflord
else
  " Improve colors on terminal
  set termguicolors
  colorscheme gruvbox-material
endif

"--------------------------------------------------------------;
"                   Conquer of Completion                      ;
"--------------------------------------------------------------;

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

augroup coc_autocommands
  autocmd!
  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

