set showcmd
filetype plugin on
syntax on
set foldmethod=syntax
set autoindent
" Ruler
set colorcolumn=80

"################################################################
"#                          Vim-Plug                            #
"################################################################

call plug#begin()

" ###################################
" # Session handling                #
" ###################################


Plug 'tpope/vim-obsession' | Plug 'dhruvasagar/vim-prosession'

let g:prosession_on_startup = 0
let g:prosession_last_session_dir = '~/.vim/session'

Plug 'mhinz/vim-startify'

let g:startify_session_dir = '~/.vim/session'

let g:startify_lists = [
\ { 'type': 'sessions',  'header': ['   Sessions']       },
\ { 'type': 'files',     'header': ['   MRU']            },
\ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
\ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
\ { 'type': 'commands',  'header': ['   Commands']       },
\ ]

cabbrev SClose call helpers#startify#stopsession()
cabbrev SDelete call helpers#startify#deletesession()

" ###################################
" # Useful general usage plugins    #
" ###################################

" Might need to install coc-snippets and set the snippets
" directory using coc command `snippets.openSnippetFiles`
Plug 'honza/vim-snippets'

let g:startify_custom_header = [
\  '      ██╗   ██╗██╗███╗   ███╗    ██████╗ ██╗███████╗███████╗███████╗██╗',
\  '      ██║   ██║██║████╗ ████║    ██╔══██╗██║██╔════╝██╔════╝██╔════╝██║',
\  '      ██║   ██║██║██╔████╔██║    ██║  ██║██║█████╗  ███████╗█████╗  ██║',
\  '      ╚██╗ ██╔╝██║██║╚██╔╝██║    ██║  ██║██║██╔══╝  ╚════██║██╔══╝  ██║',
\  '       ╚████╔╝ ██║██║ ╚═╝ ██║    ██████╔╝██║███████╗███████║███████╗███████╗',
\  '        ╚═══╝  ╚═╝╚═╝     ╚═╝    ╚═════╝ ╚═╝╚══════╝╚══════╝╚══════╝╚══════╝',
\ ]

Plug 'itchyny/lightline.vim'
let g:lightline = {'colorscheme': 'one'}
set laststatus=2
set noshowmode
set ttimeout ttimeoutlen=20

Plug 'jeffkreeftmeijer/vim-numbertoggle'
" Required options for numbertoggle
set number relativenumber

Plug 'airblade/vim-gitgutter'
let g:gitgutter_git_executable = 'git'
let g:gitgutter_set_sign_backgrounds = 1
let g:gitgutter_grep = 'rg'
set signcolumn=yes
set updatetime=100

Plug 'alvan/vim-closetag'
let g:closetag_filenames = '*.html,*.tsx,*.jsx'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
let $FZF_DEFAULT_COMMAND = 'fd -H'
let $FZF_DEFAULT_OPTS = '--exact'

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'jiangmiao/auto-pairs'
Plug 'Yggdroot/indentLine'

" ###################################
" # Vim-hardtime                    #
" ###################################

Plug 'takac/vim-hardtime'

let g:hardtime_default_on = 1
let g:hardtime_allow_different_key = 1

" ###################################
" # Language plugins                #
" ###################################

Plug 'neoclide/coc.nvim', {'branch': 'release'}

" ###################################
" # Language plugins                #
" ###################################

Plug 'elixir-editors/vim-elixir', { 'for': 'elixir' }
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }

Plug 'prettier/vim-prettier', { 'do': 'yarn install' }

let g:prettier#autoformat = 1
let g:prettier#autoformat_require_pragma = 0

" ###################################
" # Themes                          #
" ###################################

Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'artanikin/vim-synthwave84'
Plug 'sainnhe/gruvbox-material'

call plug#end()

"################################################################
"#                           Theme                              #
"################################################################

" Improve colors on terminal
set termguicolors

colorscheme dracula
set bg=dark

"################################################################
"#                        Autocommands                          #
"################################################################

" Remove trailing whitespaces on write
au BufWritePre * %s/\s\+$//e

"################################################################
"#                          Mappings                            #
"################################################################

" Mappings for the leader (space) key
map <Space> <Leader>

nnoremap <Leader>w <C-w><C-w>

" Other mappings
nnoremap <S-Enter> O<Esc>j
nnoremap <CR> o<Esc>k

" Move one character to left on insert mode
" useful for getting out of (), for example.
inoremap <C-e> <Esc>la

" Swap buffers
nnoremap <C-J> :bprev<CR>
nnoremap <C-K> :bnext<CR>

" Search files with fzf.vim
nnoremap <C-P> :Files<CR>

"################################################################
"#                            Misc                              #
"################################################################

set scrolloff=5

set wildmode=longest,list
set history=200

" Kitty terminal helper
let &t_ut=''

" Set tabs to 2 spaces
set tabstop=2
set shiftwidth=2
set expandtab

set linebreak

" Search options:
set ignorecase
" Highlight matches
set hlsearch
set incsearch

" Dont fold a file on open
set foldlevel=99

"################################################################
"#                   Conquer of Completion                      #
"################################################################

" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=utf-8

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

