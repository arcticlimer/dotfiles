"################################################################
"#                          Variables                           #
"################################################################

let g:prettier_supported_extensions = [
\ 'js',   'ts',   'css',     'less',
\ 'scss', 'json', 'graphql', 'md',
\ 'vue',  'yaml', 'yml',     'html'
\ ]

"################################################################
"#                          Vim-Plug                            #
"################################################################

call plug#begin()

" ###################################
" # Session handling                #
" ###################################

Plug 'mhinz/vim-startify'
let g:startify_session_persistence = 1
let g:startify_session_dir = '~/.vim/session'
let g:startify_lists = [
\ { 'type': 'sessions',  'header': ['   Sessions'      ] },
\ { 'type': 'files',     'header': ['   MRU'           ] },
\ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
\ { 'type': 'bookmarks', 'header': ['   Bookmarks'     ] },
\ { 'type': 'commands',  'header': ['   Commands'      ] },
\ ]
" let g:startify_custom_header = [
" \  '      ██╗   ██╗██╗███╗   ███╗    ██████╗ ██╗███████╗███████╗███████╗██╗',
" \  '      ██║   ██║██║████╗ ████║    ██╔══██╗██║██╔════╝██╔════╝██╔════╝██║',
" \  '      ██║   ██║██║██╔████╔██║    ██║  ██║██║█████╗  ███████╗█████╗  ██║',
" \  '      ╚██╗ ██╔╝██║██║╚██╔╝██║    ██║  ██║██║██╔══╝  ╚════██║██╔══╝  ██║',
" \  '       ╚████╔╝ ██║██║ ╚═╝ ██║    ██████╔╝██║███████╗███████║███████╗███████╗',
" \  '        ╚═══╝  ╚═╝╚═╝     ╚═╝    ╚═════╝ ╚═╝╚══════╝╚══════╝╚══════╝╚══════╝',
" \ ]

" ###################################
" # Useful general usage plugins    #
" ###################################

" Might need to install coc-snippets and set the snippets
" directory using coc command `snippets.openSnippetFiles`
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
let g:UltiSnipsExpandTrigger = '<Nop>'
imap <tab> <Plug>(coc-snippets-expand)
let g:coc_snippet_next = '<tab>'
let g:coc_snippet_prev = '<s-tab>'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
let g:fzf_buffers_jump = 1
let g:fzf_preview_window = ['right:50%', 'ctrl-/']
let g:fzf_history_dir = '~/.local/share/fzf-history'
let $FZF_DEFAULT_COMMAND = 'fd -H'
let $FZF_DEFAULT_OPTS = '--exact --reverse'
Plug 'stsewd/fzf-checkout.vim'
let g:fzf_checkout_git_options = '--sort=-committerdate'

Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'

Plug 'tommcdo/vim-lion'
Plug 'jiangmiao/auto-pairs'
Plug 'dahu/vim-fanfingtastic'
Plug 'preservim/nerdtree'

Plug 'moll/vim-bbye'
Plug 'gcmt/taboo.vim'
" Make sessions remember taboo tabs names
set sessionoptions+=tabpages,globals

" ###################################
" # Git wrappers                    #
" ###################################

Plug 'tpope/vim-fugitive'

Plug 'airblade/vim-gitgutter'
let g:gitgutter_set_sign_backgrounds = 1
let g:gitgutter_grep = 'rg'
set signcolumn=yes
set updatetime=100

" ###################################
" # Vim-hardtime                    #
" ###################################

Plug 'takac/vim-hardtime'
let g:hardtime_ignore_buffer_patterns = [ "NERD.*" ]
let g:hardtime_default_on = 1
let g:hardtime_maxcount = 2

" ###################################
" # Language servers / others       #
" ###################################

" Might need to install coc-marketplace and search
" for extensions with :CocList marketplace
Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'prettier/vim-prettier', { 'do': 'yarn install' }

" ###################################
" # Language plugins                #
" ###################################

Plug 'elixir-editors/vim-elixir', { 'for': 'elixir' }
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'purescript-contrib/purescript-vim'

" ###################################
" # Styling                         #
" ###################################

Plug 'Yggdroot/indentLine'

Plug 'itchyny/lightline.vim'
let g:lightline = {
\ 'colorscheme': 'wombat',
\   'active': {
\     'right': [ [ 'lineinfo' ],
\                [ 'percent' ],
\                [ 'gitbranch', 'fileformat', 'fileencoding', 'filetype' ] ]
\   },
\   'component_function': {
\     'gitbranch': 'FugitiveHead',
\     'filename': 'LightlineFilename',
\   },
\ }

" Don't show the default vim statusline messages
set noshowmode

set laststatus=2
set ttimeout ttimeoutlen=20

Plug 'ryanoasis/vim-devicons'

Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'artanikin/vim-synthwave84'
Plug 'sainnhe/gruvbox-material'

" ###################################
" # Others                          #
" ###################################

Plug 'parkr/vim-jekyll'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }

call plug#end()

"################################################################
"#                           Theme                              #
"################################################################

" Improve colors on terminal
set termguicolors

colorscheme gruvbox-material
set bg=dark

"################################################################
"#                        Autocommands                          #
"################################################################

augroup my_autocommands
  " Remove trailing whitespaces on write
  au BufWritePre * %s/\s\+$//e
  " Open help windows vertically splitted
  au FileType help wincmd L
augroup end

"################################################################
"#                          Functions                           #
"################################################################

function Format()
  let l:extension = expand('%:e')
  if index(g:prettier_supported_extensions, l:extension) >= 0
    execute ':Prettier'
  else
    call CocAction('format')
  endif
endfunction

" Add path to lightline filenames
function LightlineFilename()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

function CommandWithInput(command, prompt)
  let user_input = input(a:prompt)
  execute a:command . ' ' . user_input
endfunction

"################################################################
"#                          Commands                            #
"################################################################

command TabOpen call CommandWithInput(':TabooOpen', 'Tab name: ')
command TabRename call CommandWithInput(':TabooRename', 'Tab name: ')

"################################################################
"#                          Mappings                            #
"################################################################

" Clear search highlight
nnoremap <silent> <c-l> <c-l>:noh<cr>

map <Space> <Leader>

" ###################################
" # b - Buffer                      #
" ###################################

" Save and delete current buffer
nnoremap <silent> <Leader>bs :update<cr>
nnoremap <silent> <Leader>bd :Bdelete<cr>

" Change buffers
nnoremap <silent> <Leader>bn :bnext<cr>
nnoremap <silent> <Leader>bp :bprev<cr>

" ###################################
" # w - Window                      #
" ###################################

" Delegate vim's window namespace to <leader>w
noremap <Leader>w <C-w>

" ###################################
" # t - Tab                         #
" ###################################

nnoremap <Leader>to :TabOpen<cr>
nnoremap <Leader>tr :TabRename<cr>
nnoremap <Leader>tq :tabclose<cr>

" ###################################
" # c - Coc.nvim                    #
" ###################################

" Coc format
nnoremap <silent> <Leader>cf :call Format()<cr>

" ###################################
" # s - Session                     #
" ###################################

nnoremap <silent> <Leader>st :Startify<cr>
nnoremap <silent> <Leader>ss :SSave<cr>
nnoremap <silent> <Leader>sl :SLoad<cr>
nnoremap <silent> <Leader>sd :SDelete<cr>
nnoremap <silent> <Leader>sc :SClose<CR>

" ###################################
" # f - Find                        #
" ###################################

" Find files
nnoremap <silent> <Leader>ff :Files<cr>
" Find git files
nnoremap <silent> <Leader>fg :GFiles<cr>
" Find commits
nnoremap <silent> <Leader>fc :Commits<cr>
" Find buffers
nnoremap <silent> <Leader>fb :Buffers<cr>
" Find substring in files
nnoremap <silent> <Leader>fs :Rg<cr>
" Find windows
nnoremap <silent> <Leader>fw :Windows<cr>

" ###################################
" # p - Project                     #
" ###################################

" Open alternative projectionist file on vertical split
nnoremap <silent> <Leader>pv :AV<cr>

" ###################################
" # g - Git                         #
" ###################################

" Git status
nnoremap <silent> <Leader>gs :G<cr>

" Git diff
nnoremap <silent> <Leader>gd :Gdiff<cr>

" Git commit
nnoremap <silent> <Leader>gC :G commit<cr>
" Git push
nnoremap <silent> <Leader>gP :G push<cr>

nnoremap <silent> <Leader>gb :GBranches<cr>
nnoremap <silent> <Leader>gt :GTags<cr>

" Select sides when resolving branch conflicts
nnoremap <silent> <Leader>gf :diffget //2<cr>
nnoremap <silent> <Leader>gj :diffget //3<cr>

" ###################################
" # v - Vim utils                   #
" ###################################

" Reload vimrc
nnoremap <silent> <Leader>vr :source ~/.vim/vimrc<cr>

" Exit vim
nnoremap <silent> <Leader>vq :quitall<cr>

" ###################################
" # Other mappings                  #
" ###################################

nnoremap <silent> <C-n> :NERDTreeToggle<CR>

" Repeat last macro
nnoremap Q @@

" Go to first character in line
nnoremap H ^

" Move one character to left on insert mode
" useful for getting out of (), for example.
inoremap <C-e> <Esc>la

"################################################################
"#                            Misc                              #
"################################################################

filetype plugin on
syntax on

set undofile                " Save undos after file closes
set undodir=$HOME/.vim/undo " Where to save undo histories
set undolevels=1000         " How many undos

set lazyredraw

" Show relative numbers mantaining the current line number
set number relativenumber

" This might be slow on some terminal emulators
set cursorline

set scrolloff=5

set wildmode=longest,list
set history=200

" Kitty terminal helper
let &t_ut=''

"Mode Settings
let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)

"Cursor settings:
"  1 -> blinking block
"  2 -> solid block
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar

" Set tabs to 2 spaces
set tabstop=2
set shiftwidth=2
set expandtab

set linebreak

" Search options:
set smartcase ignorecase
" Highlight matches
set hlsearch
set incsearch

" Dont fold a file on open
set foldlevel=99
set foldmethod=syntax
" TODO
" set foldmethod=indent: Fold based on indention levels.
" set foldnestmax=3: Only fold up to three nested levels.
" set nofoldenable: Disable folding by default.

set showcmd
set autoindent

" Use mouse to scroll coc.nvim popups
set mouse=a

" Ruler
set colorcolumn=80

" Ignore case on completion
set wildignorecase

"################################################################
"#                   Conquer of Completion                      #
"################################################################

" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=utf-8

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" " GoTo code navigation.
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

augroup coc_autocommands
  autocmd!
  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
" command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" " TODO: put this inside coc namespace
" " Mappings for CoCList
" " Show all diagnostics.
" nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" " Manage extensions.
" nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" " Show commands.
" nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" " Find symbol of current document.
" nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" " Search workspace symbols.
" nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" " Do default action for next item.
" nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" " Do default action for previous item.
" nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" " Resume latest coc list.
" nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

